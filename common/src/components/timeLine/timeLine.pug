mixin timeLine(data)
  - var data          = data || {}
  - var currentStep   = data.currentStep || 1
  - var big           = data.big || false
  - var static        = data.static || false
  - var type          = data.type || "progressBar"
  - var tunnel        = data.tunnel || false
  - var stepWording   = data.stepWording || ['Défaut']
  - var progressRatio = (100 / (stepWording.length - 1) / 100) * (currentStep - 1) || 0
  - var fel           = data.fel || false

  // .c-timeLine
    - La barre de progression 'c-progressBar__line' est manipulée dynamiquement à travers son css "scaleX" via son attribut style
    - Les panneaux de progression 'c-progressStep' sont positionnés verticalement le long de la barre de progression dynamiquement à travers leur css "left" via leur attribut style
    - Accessibilité : ARIA de la progressbar : https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role
  .c-timeLine(
    class=big ? "c-timeLine--big" : ""
    class=static ? "c-timeLine--static" : ""
    class=tunnel ? "c-timeLine--tunnel" : ""
    class=type==="progressBar" ? "" : "c-timeLine--arrow"
  )&attributes(attributes)
    .c-progress
      if type === "progressBar"
        .c-progressBar(role='progressbar', aria-valuenow= progressRatio * 100, aria-valuemin='0', and aria-valuemax='100')
          .c-progressBar__line(style='-ms-transform: scaleX\(' + progressRatio + '\); -webkit-transform: scaleX\(' + progressRatio + '\); transform: scaleX\(' + progressRatio + '\)')

        //- Dispose les différentes étapes le long de la barre de progression en fonction des étapes spécifiées dans la variable 'stepWording'
        each val, index in stepWording
          - var ratio = 100 / (stepWording.length - 1) * index

          if index + 1 < currentStep
            .c-progressStep(style='left: ' + ratio + '%;').is-previous
              .c-progressStep__value= index + 1
              .c-progressStep__legend= val
          else if index + 1 === currentStep
            .c-progressStep(style='left: ' + ratio + '%;').is-current
              .c-progressStep__value= index + 1
              .c-progressStep__legend= val
          else
            .c-progressStep(style='left: ' + ratio + '%;')
              .c-progressStep__value= index + 1
              .c-progressStep__legend= val
      
      else
        +timeLineStepStatic({
          stepWording: stepWording,
          currentStep: currentStep
        })


        
    if big
      .c-progressStep__legend.u-theme-color.u-hideMediumUp= stepWording[currentStep - 1]
  // END - .c-timeLine



mixin timeLineStepStatic(data)
  - var data = data || {}
  - var stepWording   = data.stepWording || ['Défaut']
  - var currentStep   = data.currentStep || 1
  
  each val, index in stepWording
  
    .c-timeLineStepStatic(
      class=index + 1 <currentStep ? "is-done" : ""      
      class=index + 1===currentStep ? "is-current" : "")&attributes(attributes)
      .c-progressStep
        .c-progressStep__value=index + 1
      .c-progressStep__legend=val    
      
      if index + 1 != stepWording.length
        .c-progressStep__arrow  